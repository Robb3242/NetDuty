# .github/workflows/build-windows-final.yml
name: Build Windows Final

on:
  push:
    branches: [main]

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flet pyinstaller
        
    - name: Clean environment
      run: |
        cd src
        # Полная очистка
        Remove-Item -Recurse -Force dist, build -ErrorAction SilentlyContinue
        Remove-Item -Force *.spec, *.pyc -ErrorAction SilentlyContinue
        Remove-Item -Recurse -Force __pycache__ -ErrorAction SilentlyContinue
        
    - name: Create clean main.py
      run: |
        cd src
        # Создаем очищенную версию main.py
        $originalContent = Get-Content -Path "main.py" -Raw
        # Добавляем в начало файла отключение всех авто-процессов
        $newContent = @"
import os
os.environ['FLET_DISABLE_AUTO_INSTALL'] = '1'
os.environ['FLET_DISABLE_AUTO_IMPORTS'] = '1'
os.environ['FLET_DISABLE_HOT_RELOAD'] = '1'

# Принудительно отключаем все возможные мультипроцессы
import sys
if hasattr(sys, 'frozen'):
    # Мы в скомпилированном приложении - отключаем всё
    os.environ['FLET_DISABLE_MULTIPROCESSING'] = '1'

"@ + $originalContent
        $newContent | Out-File -FilePath "main_clean.py" -Encoding utf8
        
    - name: Build with clean settings
      run: |
        cd src
        pyinstaller --onefile `
          --windowed `
          --name NetDuty `
          --clean `
          --noconfirm `
          main_clean.py
        
    - name: Upload final executable
      uses: actions/upload-artifact@v4
      with:
        name: NetDuty-Windows-Final
        path: src/dist/NetDuty.exe
